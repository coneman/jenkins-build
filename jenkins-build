prompt_before_exit() {
	read -p "Do you want to abort running job ([y]es/[n]o/[c]ancel)?" ync
	case $ync in
        	[Yy]* )
			stop_last_build; exit;;
	        [Nn]* ) exit;;
        	[Cc]* ) echo "continue";;
		* ) echo "Please answer yes, no, or cancel.";;
	esac
}

stop_last_build() {
	curl -X POST --user $JENKINS_USER_ID:$JENKINS_USER_TOKEN --data-urlencode "token=${JENKINS_TOKEN}" --data-urlencode "cause=Force Stop" --data-urlencode "branch=${GIT_BRANCH}" "${job_url}/lastBuild/stop"
	echo "Job ${JENKINS_JOB} has stop"
}

do_on_exit() {
	rm .jenkins_build.tmp
}

# Pass the env-vars to MYCOMMAND
# eval $(egrep -v '^#' .env | xargs) MYCOMMAND
# â€¦ or ...
# Export the vars in .env into your shell:
# export $(egrep -v '^#' "${PWD}/jenkins/.env" | xargs)
export $(egrep -v '^#' "${1}" | xargs)

if [ -z "$JENKINS_URL" ] || [ -z "$JENKINS_TOKEN" ] || [ -z "$JENKINS_USER_ID" ] || [ -z "$JENKINS_USER_TOKEN" ] || [ -z "$JENKINS_JOB" ] ; then
	echo "Define env first"
	echo -e "\tJENKINS_URL"
	echo -e "\tJENKINS_TOKEN"
	echo -e "\tJENKINS_USER_ID"
	echo -e "\tJENKINS_USER_TOKEN"
	echo -e "\tJENKINS_JOB"
	exit
fi

job_url="${JENKINS_URL}/job/${JENKINS_JOB}"
force=false
info=false

shift

message="Build by ${JENKINS_USER_ID}."
while getopts ":fim:" o; do
    case "${o}" in
        m)
		message="${message} ${OPTARG}"
		;;
	f)
		echo "Force build"
		force=true
		;;
	i)
		echo "Show build info"
		info=true
		;;
	*)
		echo "Another"
		;;
    esac
done
shift $((OPTIND-1))
echo "${message}"

if [[ "${force}" == "true" ]]; then 
echo "Stop last build job ${JENKINS_JOB}"
stop_last_build
fi

echo "Start build job ${JENKINS_JOB}"
curl -X POST --user $JENKINS_USER_ID:$JENKINS_USER_TOKEN --data-urlencode "token=${JENKINS_TOKEN}" --data-urlencode "cause=${message}" --data-urlencode "branch=${GIT_BRANCH}" "${job_url}/buildWithParameters"

trap prompt_before_exit INT
trap do_on_exit EXIT

if [[ "${info}" == "true" ]]; then 
log=""
last_build_number=$(curl -s -X POST --user $JENKINS_USER_ID:$JENKINS_USER_TOKEN --data-urlencode "token=${JENKINS_TOKEN}" --data-urlencode "cause=Force Stop" --data-urlencode "branch=${GIT_BRANCH}" "${job_url}/lastBuild/buildNumber")
is_logging=false
echo "Waiting job ${JENKINS_JOB} started"
while
	sleep 5
	if [ "${is_logging}" == "false" ]; then
		current_build_number=$(curl -s -X POST --user $JENKINS_USER_ID:$JENKINS_USER_TOKEN --data-urlencode "token=${JENKINS_TOKEN}" --data-urlencode "cause=Force Stop" --data-urlencode "branch=${GIT_BRANCH}" "${job_url}/lastBuild/buildNumber")
		if [ $last_build_number == $current_build_number ]; then
			continue
		fi
		is_logging=true
	fi
	start=`echo $log | awk '{print length}'`
	progress=$(curl -s -X POST --user $JENKINS_USER_ID:$JENKINS_USER_TOKEN --data-urlencode "token=${JENKINS_TOKEN}" --data-urlencode "branch=${GIT_BRANCH}" --data-urlencode "start=${start}" "${job_url}/${current_build_number}/logText/progressiveText" > .jenkins_build.tmp)
	cat .jenkins_build.tmp
	log="${log} $(cat .jenkins_build.tmp)"
	if [[ $(cat .jenkins_build.tmp) == *"Finished:"* ]]; then
		break
	fi
do :; done
rm .jenkins_build.tmp
fi
